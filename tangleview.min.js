let dbGlobal=new loki("txHistory"),txHistoryGlobal={},txAmountToPollGlobal=15e3,InitialHistoryPollRetriesGlobal=10,websocketActiveGlobal={},historyFetchedFromBackendGlobal=!1;const baseSlice=(array,start,end)=>{var index=-1,length=array.length;start<0&&(start=-start>length?0:length+start),(end=end>length?length:end)<0&&(end+=length),length=start>end?0:end-start>>>0,start>>>=0;for(var result=Array(length);++index<length;)result[index]=array[index+start];return result},takeRight=(array,n,guard)=>{var length=null==array?0:array.length;return length?(n=guard||void 0===n?1:parseInt(n,10),baseSlice(array,(n=length-n)<0?0:n,length)):[]},addCollectionsToTxHistory=options=>new Promise((resolve,reject)=>{let error=!1;try{txHistoryGlobal[options.host]=dbGlobal.addCollection("txHistory",{unique:["hash"],indices:["address","bundle","receivedAt"]})}catch(e){error=e}finally{error?(console.log(error),reject(error)):resolve()}}),getUrl=options=>(options&&options.host?(options.hostProtocol=`${options&&options.ssl?"https:":"http:"}`,options.hostUrl=`${options.hostProtocol}//${options.host}`):(options.hostProtocol=window.location.protocol,options.host=window.location.hostname,options.hostUrl=`${options.hostProtocol}//${options.host}`),options),getRndInteger=(min,max)=>Math.floor(Math.random()*(max-min+1))+min,lokiFind=(params,callback)=>{let result=[],err=!1;try{result=txHistoryGlobal[params.host].chain().find(params&&params.query?params.query:{}).simplesort(params&&params.sort?params.sort:"").data({removeMeta:!0}),params.limit&&params.limit>0&&(result=takeRight(result,params.limit))}catch(e){err="Error on lokiJS find() call: "+e}finally{callback&&callback(err,result)}},InitialHistoryPoll=(that,options)=>{const apiUrl=`${options.hostUrl}:4433/api/v1/getRecentTransactions?amount=${txAmountToPollGlobal}`;fetch(apiUrl,{cache:"no-cache"}).then(fetchedList=>fetchedList.json()).then(fetchedListJSON=>{const txList=fetchedListJSON.txHistory?fetchedListJSON.txHistory:[];txHistoryGlobal[options.host].insert(txList),historyFetchedFromBackendGlobal=!0}).catch(e=>{console.error("Error fetching txHistory",e),InitialHistoryPollRetriesGlobal>0&&!historyFetchedFromBackendGlobal&&(window.setTimeout(()=>InitialHistoryPoll(that,options),2500),InitialHistoryPollRetriesGlobal--)})},emitToAllInstances=(txType,tx)=>{tangleview.allInstances.map(instance=>{instance.emit(txType,tx)})},UpdateTXStatus=(update,updateType,options)=>{const txHash=update.hash,milestoneType=update.milestone,confirmationTime=update.ctime,txToUpdate=txHistoryGlobal[options.host].by("hash",txHash);txToUpdate?("Confirmed"!==updateType&&"Milestone"!==updateType||(txToUpdate.ctime=confirmationTime,txToUpdate.confirmed=!0),"Milestone"===updateType&&(txToUpdate.milestone=milestoneType),"Reattach"===updateType&&(txToUpdate.reattached=!0),txHistoryGlobal[options.host].update(txToUpdate)):console.log(`LokiJS: ${"Milestone"===updateType?"Milestone":"TX"} not found in local DB - Hash: ${txHash} | updateType: ${updateType}`)},InitWebSocket=(that,options)=>{if(!websocketActiveGlobal[options.host]){websocketActiveGlobal[options.host]=!0;const webSocketUrl=`${options.hostUrl}:4434`,socket=io.connect(webSocketUrl,{secure:"https:"===options.hostProtocol,reconnection:!1});socket.on("connect",()=>{console.log(`Successfully connected to Websocket.. [${options.host}]`),socket.on("newTX",newTX=>{emitToAllInstances("txNew",JSON.parse(JSON.stringify(newTX)));try{txHistoryGlobal[options.host].insert(newTX)}catch(e){console.log(e)}}),socket.on("update",update=>{UpdateTXStatus(update,"Confirmed",options),emitToAllInstances("txConfirmed",update)}),socket.on("updateMilestone",updateMilestone=>{UpdateTXStatus(updateMilestone,"Milestone",options),emitToAllInstances("milestones",updateMilestone)}),socket.on("updateReattach",updateReattach=>{UpdateTXStatus(updateReattach,"Reattach",options),emitToAllInstances("txReattaches",updateReattach)}),socket.on("disconnect",reason=>{console.log(`WebSocket disconnect [${reason}]`),websocketActiveGlobal[options.host]=!1,socket.close(),window.setTimeout(()=>{InitWebSocket(that,options),console.log("WebSocket reconnecting...")},getRndInteger(100,1e3))}),socket.on("reconnect",attemptNumber=>{console.log(`WebSocket reconnect [${attemptNumber}]`)}),socket.on("reconnect_error",error=>{console.log(`WebSocket reconnect_error [${error}]`),websocketActiveGlobal[options.host]=!1,window.setTimeout(()=>{InitWebSocket(that,options)},getRndInteger(10,100))}),socket.on("connect_timeout",timeout=>{console.log(`WebSocket connect_timeout [${timeout}]`),websocketActiveGlobal[options.host]=!1,window.setTimeout(()=>{InitWebSocket(that,options)},getRndInteger(10,100))}),socket.on("error",error=>{console.log(`WebSocket error [${error}]`)}),socket.on("connect_error",error=>{console.log(`WebSocket connect_error [${error}]`),websocketActiveGlobal[options.host]=!1,window.setTimeout(()=>{InitWebSocket(that,options)},getRndInteger(10,100))}),window.addEventListener("beforeunload",()=>{socket.close()})})}};class tangleview{constructor(options){this.events={},options=getUrl(options=options||{}),this.host=options.host,tangleview.allInstances.push(this),txHistoryGlobal[options.host]||addCollectionsToTxHistory(options).then(()=>{InitialHistoryPoll(this,options)}).catch(err=>{console.log("addCollectionsToTxHistory error: ",err)}),websocketActiveGlobal[options.host]?websocketActiveGlobal[options.host]&&console.log("WebSocket already initialized"):InitWebSocket(this,options)}emit(eventName,data){const event=this.events[eventName];event&&event.forEach(fn=>{fn.call(null,data)})}on(eventName,fn){return this.events[eventName]||(this.events[eventName]=[]),this.events[eventName].push(fn),()=>{this.events[eventName]=this.events[eventName].filter(eventFn=>fn!==eventFn)}}find(query,queryOption){return new Promise((resolve,reject)=>{lokiFind({query:query,limit:queryOption&&queryOption.limit?queryOption.limit:-1,sort:queryOption&&queryOption.sort?queryOption.sort:"",host:this.host},(err,res)=>{err?reject(err):resolve(res)})})}remove(query,queryOption){return new Promise((resolve,reject)=>{let error=!1,result;try{result=txHistoryGlobal[this.host].chain().find(query).limit(queryOption&&queryOption.limit?queryOption.limit:-1).remove()}catch(e){error=e}finally{error?reject(error):resolve(result)}})}getTxHistory(options){return new Promise((resolve,reject)=>{let retries=20;console.log(this.host,options);const lokiFindWrapper=()=>{lokiFind({limit:options&&options.amount?options.amount:-1,host:this.host},(err,res)=>{err?reject(err):res.length<=5&&retries>0&&!historyFetchedFromBackendGlobal?(retries--,window.setTimeout(()=>{lokiFindWrapper()},100)):res.length<=5&&0===retries&&!historyFetchedFromBackendGlobal?reject(res):resolve(res)})};lokiFindWrapper()})}}tangleview.allInstances=[];